# 1 "lexer.mll"
 
  open Lexing
  open Parser
 
  let keywords = Hashtbl.create 30
  let () =
    List.iter
      (fun (x,y) -> Hashtbl.add keywords x y)
      [ "MODULE", MODULE;
	"process", PROCESS;
	"boolean", BOOLEAN;
	"VAR", VAR;
	"init", INIT;
	"next", NEXT;
	"SPEC", SPEC;
	"ASSIGN", ASSIGN;
	"case", CASE;
	"esac", ESAC;
	"AX", AX;
	"EX", EX;
        "AG", AG;
	"EG", EG;
	"AF", AF;
	"EF", EF;
	"A", A;
	"E", E;
	"U", U;
	"R", R;
	"TRUE", TRUE;
	"FALSE", FALSE
      ]

 let newline lexbuf =
    let pos = lexbuf.lex_curr_p in
    lexbuf.lex_curr_p <-
     {pos with pos_lnum = pos.pos_lnum + 1; pos_bol = pos.pos_cnum }

 let string_buf = Buffer.create 1024
   
 exception Lexical_errof of string
     

# 45 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\235\255\236\255\238\255\001\000\241\255\242\255\243\255\
    \001\000\003\000\246\255\247\255\248\255\249\255\250\255\251\255\
    \001\000\078\000\002\000\255\255\252\255\245\255\240\255\030\000\
    \239\255\002\000\253\255\254\255\255\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \011\000\018\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\002\000\001\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_default = 
   "\255\255\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\255\255\000\000\000\000\000\000\000\000\255\255\
    \000\000\026\000\000\000\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\018\000\019\000\018\000\028\000\018\000\000\000\018\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \018\000\007\000\018\000\000\000\000\000\000\000\005\000\000\000\
    \015\000\014\000\000\000\000\000\003\000\016\000\020\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\009\000\002\000\004\000\008\000\023\000\022\000\
    \021\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\013\000\024\000\012\000\000\000\017\000\
    \000\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\011\000\006\000\010\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\000\000\000\000\000\000\000\000\017\000\000\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\027\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\018\000\025\000\000\000\255\255\018\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\018\000\255\255\255\255\255\255\000\000\255\255\
    \000\000\000\000\255\255\255\255\000\000\000\000\016\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\000\000\000\000\004\000\008\000\
    \009\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\023\000\000\000\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\255\255\255\255\255\255\255\255\017\000\255\255\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\025\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 52 "lexer.mll"
        (newline lexbuf; token lexbuf)
# 169 "lexer.ml"

  | 1 ->
# 54 "lexer.mll"
 (token lexbuf)
# 174 "lexer.ml"

  | 2 ->
let
# 55 "lexer.mll"
           id
# 180 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 56 "lexer.mll"
     ( try
		Hashtbl.find keywords id
	      with Not_found ->
		IDENT id
	    )
# 188 "lexer.ml"

  | 3 ->
# 61 "lexer.mll"
       (comment lexbuf; token lexbuf)
# 193 "lexer.ml"

  | 4 ->
# 62 "lexer.mll"
      (LP)
# 198 "lexer.ml"

  | 5 ->
# 63 "lexer.mll"
      (RP)
# 203 "lexer.ml"

  | 6 ->
# 64 "lexer.mll"
      (LB)
# 208 "lexer.ml"

  | 7 ->
# 65 "lexer.mll"
      (RB)
# 213 "lexer.ml"

  | 8 ->
# 66 "lexer.mll"
      (LCB)
# 218 "lexer.ml"

  | 9 ->
# 67 "lexer.mll"
      (RCB)
# 223 "lexer.ml"

  | 10 ->
# 68 "lexer.mll"
       (EQDEF)
# 228 "lexer.ml"

  | 11 ->
# 69 "lexer.mll"
      (EQ)
# 233 "lexer.ml"

  | 12 ->
# 70 "lexer.mll"
      (NOT)
# 238 "lexer.ml"

  | 13 ->
# 71 "lexer.mll"
      (OR)
# 243 "lexer.ml"

  | 14 ->
# 72 "lexer.mll"
      (AND)
# 248 "lexer.ml"

  | 15 ->
# 73 "lexer.mll"
       (IMP)
# 253 "lexer.ml"

  | 16 ->
# 74 "lexer.mll"
        (EQUV)
# 258 "lexer.ml"

  | 17 ->
# 75 "lexer.mll"
      (COMMA)
# 263 "lexer.ml"

  | 18 ->
# 76 "lexer.mll"
      (COLON)
# 268 "lexer.ml"

  | 19 ->
# 77 "lexer.mll"
      (SEMI)
# 273 "lexer.ml"

  | 20 ->
# 78 "lexer.mll"
      (EOF)
# 278 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 25
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 81 "lexer.mll"
 ( () )
# 289 "lexer.ml"

  | 1 ->
# 83 "lexer.mll"
 (())
# 294 "lexer.ml"

  | 2 ->
# 85 "lexer.mll"
 ( comment lexbuf )
# 299 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

